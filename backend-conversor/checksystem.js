// checkSystem.js
const amqp = require('amqplib');
const { exec } = require('child_process');
const fs = require('fs').promises;
const path = require('path');
require('dotenv').config();

async function checkSystem() {
    console.log('üîç Iniciando verifica√ß√£o do sistema...\n');

    // Verificar vari√°veis de ambiente
    console.log('üìã Verificando vari√°veis de ambiente:');
    const requiredEnvVars = [
        'PORT',
        'AZURE_STORAGE_CONTAINER_NAME',
        'FFMPEG_PATH',
        'RABBITMQ_URL'
    ];

    for (const envVar of requiredEnvVars) {
        if (process.env[envVar]) {
            console.log(`‚úÖ ${envVar} est√° configurado`);
        } else {
            console.log(`‚ùå ${envVar} n√£o est√° configurado`);
        }
    }

    // Verificar FFmpeg
    console.log('\nüé• Verificando FFmpeg:');
    try {
        await new Promise((resolve, reject) => {
            exec(`"${process.env.FFMPEG_PATH}" -version`, (error, stdout) => {
                if (error) reject(error);
                else resolve(stdout);
            });
        });
        console.log('‚úÖ FFmpeg est√° instalado e acess√≠vel');
    } catch (error) {
        console.log('‚ùå FFmpeg n√£o est√° acess√≠vel:', error.message);
    }

    // Verificar RabbitMQ
    console.log('\nüê∞ Verificando RabbitMQ:');
    try {
        const conn = await amqp.connect(process.env.RABBITMQ_URL);
        await conn.close();
        console.log('‚úÖ RabbitMQ est√° rodando e acess√≠vel');
    } catch (error) {
        console.log('‚ùå RabbitMQ n√£o est√° acess√≠vel:', error.message);
    }

    // Verificar diret√≥rio temp
    console.log('\nüìÅ Verificando diret√≥rio tempor√°rio:');
    const tempDir = path.join(__dirname, 'temp');
    try {
        await fs.access(tempDir);
        console.log('‚úÖ Diret√≥rio temp existe');
    } catch {
        try {
            await fs.mkdir(tempDir);
            console.log('‚úÖ Diret√≥rio temp criado com sucesso');
        } catch (error) {
            console.log('‚ùå N√£o foi poss√≠vel criar diret√≥rio temp:', error.message);
        }
    }

    // Verificar porta
    console.log('\nüîå Verificando porta:');
    const net = require('net');
    const server = net.createServer();

    try {
        await new Promise((resolve, reject) => {
            server.listen(process.env.PORT, () => {
                server.close();
                resolve();
            });
            server.on('error', reject);
        });
        console.log(`‚úÖ Porta ${process.env.PORT} est√° dispon√≠vel`);
    } catch (error) {
        console.log(`‚ùå Porta ${process.env.PORT} j√° est√° em uso`);
    }

    console.log('\n‚ú® Verifica√ß√£o conclu√≠da!');
}

checkSystem().catch(console.error);